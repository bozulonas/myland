import{_ as t,c as o,a,o as r}from"./app-B7AN5DHo.js";const i={};function s(n,e){return r(),o("div",null,[...e[0]||(e[0]=[a('<p>Here is a concise description of the architecture and plan, suitable for prompting an LLM agent:</p><h3 id="prompt-for-llm-agent" tabindex="-1"><a class="header-anchor" href="#prompt-for-llm-agent"><span><strong>Prompt for LLM Agent</strong></span></a></h3><p><strong>Role:</strong> You are an expert in VuePress 2 and front-end development.</p><p><strong>Task:</strong> Generate the code and implementation steps for a dynamic, filterable list on a VuePress 2 website.</p><p><strong>Architecture:</strong> The architecture is <strong>&quot;Static Site Generation (SSG) with Client-Side Filtering.&quot;</strong></p><ol><li><strong>Data Source:</strong> A folder of Markdown files (e.g., <code>/achievements/</code>). Each file uses YAML front matter to define its metadata, especially an array of <code>tags</code> (e.g., <code>tags: [Combat, Boss, Easy]</code>).</li><li><strong>Build Process:</strong> At build time, VuePress 2 parses all Markdown files and their front matter, making this data available to the client-side application.</li><li><strong>Client-Side App:</strong> The user&#39;s browser loads a static page that runs as a Single-Page Application (SPA). All filtering happens client-side in JavaScript.</li></ol><p><strong>Implementation Plan:</strong></p><ol><li>Create a custom Vue component (e.g., <code>.vuepress/components/AchievementList.vue</code>).</li><li>Inside this component&#39;s <code>&lt;script setup&gt;</code>, use the built-in VuePress 2 Client API.</li><li>Import the <code>useRoutes</code> hook from <code>@vuepress/client</code>. This hook provides a reactive array of all page routes on the site.</li><li>Create a <code>computed</code> property (e.g., <code>allAchievements</code>) that filters the <code>useRoutes</code> array to only include pages from the <code>/achievements/</code> directory. Each item in this array will contain the page&#39;s <code>path</code> and <code>frontmatter</code>.</li><li>Create another <code>computed</code> property (e.g., <code>allTags</code>) that iterates over <code>allAchievements</code> to generate a <code>Set</code> of all unique tags, which is then converted to a sorted array.</li><li>Create a <code>ref</code> (e.g., <code>selectedTags</code>) to store the user&#39;s currently selected filter tags.</li><li>Create a final <code>computed</code> property (e.g., <code>filteredAchievements</code>) that filters <code>allAchievements</code> based on the <code>selectedTags</code> array.</li><li>The component&#39;s <code>&lt;template&gt;</code> should: a. Render a list of checkboxes or buttons based on the <code>allTags</code> array. Use <code>v-model</code> to bind these to the <code>selectedTags</code> ref. b. Render the list of <code>filteredAchievements</code>, displaying the <code>frontmatter.title</code>, <code>frontmatter.description</code>, etc., for each item.</li></ol>',8)])])}const l=t(i,[["render",s]]),d=JSON.parse('{"path":"/instructions%20for%20achievements%20refactor.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1761529184000,"contributors":[{"name":"Bo","username":"Bo","email":"kevinzulonas@gmail.com","commits":1,"url":"https://github.com/Bo"}],"changelog":[{"hash":"d669a85c6c863291295b1975a63e2223389349a6","time":1761529184000,"email":"kevinzulonas@gmail.com","author":"Bo","message":"Refactor achievements handling: replace dynamic page loading with static data import, remove unused plugin, and add achievement generation script. POC working"}]},"filePathRelative":"instructions for achievements refactor.md"}');export{l as comp,d as data};
